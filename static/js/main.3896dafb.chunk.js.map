{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHead","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHead","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","App","characters","filter","character","i","toConsumableArray","concat","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3896dafb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst TableHead = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Superpower</th>\n\t\t\t\t<th>Remove</th>\n      </tr>\n    </thead>\n  );\n}\n\nconst TableBody = props => {\n\tconst rows = props.characterData.map((row,index) => {\n\t\t\treturn(\n\t\t\t\t<tr key={index}>\n\t\t\t\t\t<td>{row.name}</td>\n\t\t\t\t\t<td>{row.job}</td>\n\t\t\t\t\t<td><button onClick={() => props.removeCharacter(index)}>Delete</button></td>\n\t\t\t\t</tr>\n\t\t\t);\n\t});\n\n\treturn <tbody>{rows}</tbody>\n}\n\nclass Table extends Component {\n  render() {\n\t\tconst { characterData, removeCharacter } = this.props;\n    return(\n\t\t\t<table>\n\t\t\t\t<TableHead />\n\t\t\t\t<TableBody characterData={characterData} removeCharacter={removeCharacter}/>\n\t\t\t</table>\n\t\t);\n  }\n}\n\nexport default Table;\n","import React, {Component} from 'react';\n\nclass Form extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.initialState = {\n\t\t\t\tname: '',\n\t\t\t\tjob:''\n\t\t};\n\n\t\tthis.state = this.initialState;\n\t}\n\n\thandleChange = event => {\n\t\tconst { name, value } = event.target;\n\n\t\tthis.setState({\n\t\t\t[name]:value\n\t\t});\n\t}\n\n\tsubmitForm = () => {\n\t\tthis.props.handleSubmit(this.state);\n\t\tthis.setState(this.initialState);\n\t}\n\trender(){\n\t\tconst {name,job} = this.state;\n\t\treturn(\n\t\t\t<form >\n\t\t\t\t<label>Name</label>\n\t\t\t\t<input type=\"text\" name=\"name\" value={name} onChange={this.handleChange}/>\n\t\t\t\t<label>Job</label>\n\t\t\t\t<input type=\"text\" name=\"job\" value={job} onChange={this.handleChange}/>\n\t\t\t\t<br/>\n\t\t\t\t<input type=\"button\" value=\"Add new superhero\" onClick={this.submitForm}/>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default Form;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport Form from './Form';\n\nclass App extends Component {\n  state = {\n    characters: []\n  };\n\n  removeCharacter = index => {\n    const {characters} = this.state;\n\n    this.setState({\n      characters: characters.filter((character,i) => {\n        return i !== index;\n      })\n    });\n\n  }\n\n  handleSubmit = character => {\n    this.setState({\n      characters: [...this.state.characters,character]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React Tutorial - SuperHeroes Collection</h1>\n        <p>Add new Superheroes or Delete them.</p>\n        <Table characterData={this.state.characters} removeCharacter={this.removeCharacter} />\n        <Form handleSubmit={this.handleSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}